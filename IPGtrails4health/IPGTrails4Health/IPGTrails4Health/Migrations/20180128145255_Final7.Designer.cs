// <auto-generated />
using IPGTrails4Health.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IPGTrails4Health.Migrations
{
    [DbContext(typeof(TurismoDbContext))]
    [Migration("20180128145255_Final7")]
    partial class Final7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IPGTrails4Health.Models.Alojamento", b =>
                {
                    b.Property<int>("AlojamentoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contacto")
                        .IsRequired();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("LocalidadeId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("TipoAlojamentoId");

                    b.HasKey("AlojamentoId");

                    b.HasIndex("LocalidadeId");

                    b.HasIndex("TipoAlojamentoId");

                    b.ToTable("Alojamentos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.AlojamentoTrilho", b =>
                {
                    b.Property<int>("TrilhoId");

                    b.Property<int>("AlojamentoId");

                    b.Property<int>("AlojamentoTrilhoId");

                    b.HasKey("TrilhoId", "AlojamentoId");

                    b.HasIndex("AlojamentoId");

                    b.ToTable("AlojamentosTrilhos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.AreaDescanso", b =>
                {
                    b.Property<int>("AreaDescansoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Localizacao");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("AreaDescansoId");

                    b.ToTable("AreasDescanso");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.AreaDescansoTrilho", b =>
                {
                    b.Property<int>("TrilhoId");

                    b.Property<int>("AreaDescansoId");

                    b.Property<int>("AreaDescansoTrilhoId");

                    b.HasKey("TrilhoId", "AreaDescansoId");

                    b.HasIndex("AreaDescansoId");

                    b.ToTable("AreasDescansoTrilhos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Dificuldade", b =>
                {
                    b.Property<int>("DificuldadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("DificuldadeId");

                    b.ToTable("Dificuldades");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.EpocaAno", b =>
                {
                    b.Property<int>("EpocaAnoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("EpocaAnoId");

                    b.ToTable("EpocasAno");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.EstadoTrilho", b =>
                {
                    b.Property<int>("TrilhoId");

                    b.Property<int>("EstadoId");

                    b.Property<string>("Causa");

                    b.Property<DateTime?>("DataFim");

                    b.Property<DateTime>("DataInicio");

                    b.Property<int>("EstadoTrilhoId");

                    b.HasKey("TrilhoId", "EstadoId");

                    b.HasIndex("EstadoId");

                    b.ToTable("EstadosTrilho");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Localidade", b =>
                {
                    b.Property<int>("LocalidadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoPostal");

                    b.Property<string>("Nome");

                    b.HasKey("LocalidadeId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.PontoInteresse", b =>
                {
                    b.Property<int>("PontoInteresseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Local");

                    b.Property<int>("LocalidadeId");

                    b.Property<string>("Nome");

                    b.Property<string>("Observacoes");

                    b.Property<int>("TipoPontoInteresseId");

                    b.HasKey("PontoInteresseId");

                    b.HasIndex("LocalidadeId");

                    b.HasIndex("TipoPontoInteresseId");

                    b.ToTable("PontosInteresse");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.PontoInteresseTrilho", b =>
                {
                    b.Property<int>("TrilhoId");

                    b.Property<int>("PontoInteresseId");

                    b.Property<int>("PontoInteresseTrilhoId");

                    b.HasKey("TrilhoId", "PontoInteresseId");

                    b.HasIndex("PontoInteresseId");

                    b.ToTable("PontosInteresseTrilho");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Restaurante", b =>
                {
                    b.Property<int>("RestauranteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contacto");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("LocalidadeId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("RestauranteId");

                    b.HasIndex("LocalidadeId");

                    b.ToTable("Restaurantes");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.RestauranteTrilho", b =>
                {
                    b.Property<int>("TrilhoId");

                    b.Property<int>("RestauranteId");

                    b.Property<int>("RestauranteTrilhoId");

                    b.HasKey("TrilhoId", "RestauranteId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("RestaurantesTrilhos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.TipoAlojamento", b =>
                {
                    b.Property<int>("TipoAlojamentoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("TipoAlojamentoId");

                    b.ToTable("TipoAlojamentos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.TipoPontoInteresse", b =>
                {
                    b.Property<int>("TipoPontoInteresseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("TipoPontoInteresseId");

                    b.ToTable("TipoPontosInteresse");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Trilho", b =>
                {
                    b.Property<int>("TrilhoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Chegada")
                        .IsRequired();

                    b.Property<int>("DificuldadeId");

                    b.Property<decimal>("Distancia");

                    b.Property<decimal>("Duracao");

                    b.Property<int>("EpocaAnoId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Partida")
                        .IsRequired();

                    b.HasKey("TrilhoId");

                    b.HasIndex("DificuldadeId");

                    b.HasIndex("EpocaAnoId");

                    b.ToTable("Trilhos");
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Alojamento", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Localidade", "Localidade")
                        .WithMany()
                        .HasForeignKey("LocalidadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.TipoAlojamento", "TipoAlojamento")
                        .WithMany()
                        .HasForeignKey("TipoAlojamentoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.AlojamentoTrilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Alojamento", "Alojamento")
                        .WithMany("AlojamentoTrilhos")
                        .HasForeignKey("AlojamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.Trilho", "Trilho")
                        .WithMany("AlojamentoTrilhos")
                        .HasForeignKey("TrilhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.AreaDescansoTrilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.AreaDescanso", "AreaDescanso")
                        .WithMany("AreasDescansoTrilhos")
                        .HasForeignKey("AreaDescansoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.Trilho", "Trilho")
                        .WithMany("AreasDescansoTrilhos")
                        .HasForeignKey("TrilhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.EstadoTrilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Estado", "Estado")
                        .WithMany("EstadosTrilho")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.Trilho", "Trilho")
                        .WithMany("EstadosTrilho")
                        .HasForeignKey("TrilhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.PontoInteresse", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Localidade", "Localidade")
                        .WithMany()
                        .HasForeignKey("LocalidadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.TipoPontoInteresse", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoPontoInteresseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.PontoInteresseTrilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.PontoInteresse", "PontoInteresse")
                        .WithMany("PontosInteresseTrilhos")
                        .HasForeignKey("PontoInteresseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.Trilho", "Trilho")
                        .WithMany("PontosInteresseTrilhos")
                        .HasForeignKey("TrilhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Restaurante", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Localidade", "Localidade")
                        .WithMany()
                        .HasForeignKey("LocalidadeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.RestauranteTrilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Restaurante", "Restaurante")
                        .WithMany("RestaurantesTrilhos")
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.Trilho", "Trilho")
                        .WithMany("RestaurantesTrilhos")
                        .HasForeignKey("TrilhoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IPGTrails4Health.Models.Trilho", b =>
                {
                    b.HasOne("IPGTrails4Health.Models.Dificuldade", "Dificuldade")
                        .WithMany()
                        .HasForeignKey("DificuldadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IPGTrails4Health.Models.EpocaAno", "EpocaAno")
                        .WithMany()
                        .HasForeignKey("EpocaAnoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
